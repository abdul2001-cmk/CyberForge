import React, { useState } from 'react';
import { Shield, Target, Bug, AlertTriangle, CheckCircle, XCircle, Search, Code } from 'lucide-react';

interface VulnerabilityResult {
  id: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  title: string;
  description: string;
  target: string;
  cve?: string;
  solution: string;
  status: 'found' | 'patched' | 'false-positive';
}

interface TestModule {
  id: string;
  name: string;
  description: string;
  category: 'web' | 'network' | 'system' | 'wireless';
  enabled: boolean;
  status: 'idle' | 'running' | 'completed' | 'failed';
}

export default function PenTestSuite() {
  const [target, setTarget] = useState('https://example.com');
  const [isRunning, setIsRunning] = useState(false);
  const [activeTab, setActiveTab] = useState('modules');

  const [testModules, setTestModules] = useState<TestModule[]>([
    { id: '1', name: 'SQL Injection Scanner', description: 'Detect SQL injection vulnerabilities', category: 'web', enabled: true, status: 'idle' },
    { id: '2', name: 'XSS Detection', description: 'Cross-site scripting vulnerability scanner', category: 'web', enabled: true, status: 'idle' },
    { id: '3', name: 'Directory Traversal', description: 'Path traversal vulnerability detection', category: 'web', enabled: true, status: 'idle' },
    { id: '4', name: 'Port Scanner', description: 'Comprehensive port scanning and service detection', category: 'network', enabled: true, status: 'idle' },
    { id: '5', name: 'SSL/TLS Analysis', description: 'SSL certificate and configuration analysis', category: 'network', enabled: false, status: 'idle' },
    { id: '6', name: 'Privilege Escalation', description: 'System privilege escalation detection', category: 'system', enabled: false, status: 'idle' },
  ]);

  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityResult[]>([
    {
      id: '1',
      severity: 'critical',
      title: 'SQL Injection in Login Form',
      description: 'The login form is vulnerable to SQL injection attacks through the username parameter.',
      target: '/login.php',
      cve: 'CVE-2023-1234',
      solution: 'Use parameterized queries and input validation.',
      status: 'found'
    },
    {
      id: '2',
      severity: 'high',
      title: 'Cross-Site Scripting (XSS)',
      description: 'Reflected XSS vulnerability found in search functionality.',
      target: '/search.php',
      solution: 'Implement proper input sanitization and output encoding.',
      status: 'found'
    },
    {
      id: '3',
      severity: 'medium',
      title: 'Weak SSL Configuration',
      description: 'Server supports weak SSL/TLS protocols and cipher suites.',
      target: 'SSL Configuration',
      solution: 'Update SSL configuration to use TLS 1.2+ and strong ciphers.',
      status: 'found'
    },
    {
      id: '4',
      severity: 'low',
      title: 'Information Disclosure',
      description: 'Server headers reveal sensitive information about the technology stack.',
      target: 'HTTP Headers',
      solution: 'Configure server to hide version information in headers.',
      status: 'patched'
    }
  ]);

  const runPenTest = () => {
    setIsRunning(true);
    setActiveTab('results');
    
    // Simulate running tests
    const enabledModules = testModules.filter(m => m.enabled);
    let completed = 0;
    
    enabledModules.forEach((module, index) => {
      setTimeout(() => {
        setTestModules(prev => prev.map(m => 
          m.id === module.id ? { ...m, status: 'running' } : m
        ));
        
        setTimeout(() => {
          setTestModules(prev => prev.map(m => 
            m.id === module.id ? { ...m, status: 'completed' } : m
          ));
          completed++;
          
          if (completed === enabledModules.length) {
            setIsRunning(false);
          }
        }, 2000 + Math.random() * 3000);
      }, index * 1000);
    });
  };

  const toggleModule = (id: string) => {
    setTestModules(prev => prev.map(m => 
      m.id === id ? { ...m, enabled: !m.enabled } : m
    ));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-500/20 border-red-500/30';
      case 'high': return 'text-orange-400 bg-orange-500/20 border-orange-500/30';
      case 'medium': return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/30';
      case 'low': return 'text-blue-400 bg-blue-500/20 border-blue-500/30';
      default: return 'text-gray-400 bg-gray-500/20 border-gray-500/30';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'running': return <div className="animate-spin w-4 h-4 border-2 border-cyan-400 border-t-transparent rounded-full" />;
      case 'completed': return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'failed': return <XCircle className="w-4 h-4 text-red-400" />;
      default: return <div className="w-4 h-4 bg-gray-600 rounded-full" />;
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'web': return <Code className="w-4 h-4" />;
      case 'network': return <Target className="w-4 h-4" />;
      case 'system': return <Shield className="w-4 h-4" />;
      default: return <Bug className="w-4 h-4" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-white mb-2">Penetration Testing Suite</h2>
          <p className="text-gray-400">Comprehensive vulnerability assessment and security testing</p>
        </div>
        <div className="flex items-center space-x-2">
          <Bug className="w-5 h-5 text-orange-400" />
          <span className="text-orange-400">Vulnerability Scanner</span>
        </div>
      </div>

      {/* Target Configuration */}
      <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Target Configuration</h3>
        <div className="flex space-x-4">
          <div className="flex-1">
            <input
              type="text"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-3 text-white focus:border-cyan-500 focus:outline-none"
              placeholder="Enter target URL or IP address"
            />
          </div>
          <button
            onClick={runPenTest}
            disabled={isRunning}
            className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 disabled:from-gray-600 disabled:to-gray-700 text-white font-medium py-3 px-6 rounded-lg transition-all duration-200 flex items-center space-x-2"
          >
            <Search className="w-4 h-4" />
            <span>{isRunning ? 'Running...' : 'Start Scan'}</span>
          </button>
        </div>
      </div>

      {/* Tabs */}
      <div className="flex space-x-1 bg-gray-800/30 p-1 rounded-lg">
        <button
          onClick={() => setActiveTab('modules')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 ${
            activeTab === 'modules' 
              ? 'bg-cyan-500 text-white' 
              : 'text-gray-400 hover:text-white hover:bg-gray-700/50'
          }`}
        >
          Test Modules
        </button>
        <button
          onClick={() => setActiveTab('results')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-200 ${
            activeTab === 'results' 
              ? 'bg-cyan-500 text-white' 
              : 'text-gray-400 hover:text-white hover:bg-gray-700/50'
          }`}
        >
          Vulnerabilities
        </button>
      </div>

      {/* Test Modules Tab */}
      {activeTab === 'modules' && (
        <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Available Test Modules</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {testModules.map((module) => (
              <div key={module.id} className="bg-gray-700/30 border border-gray-600/50 rounded-lg p-4 hover:border-cyan-500/50 transition-all duration-300">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    {getCategoryIcon(module.category)}
                    <div>
                      <h4 className="text-white font-medium">{module.name}</h4>
                      <p className="text-gray-400 text-sm">{module.description}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {getStatusIcon(module.status)}
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={module.enabled}
                        onChange={() => toggleModule(module.id)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-500"></div>
                    </label>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className={`px-2 py-1 rounded text-xs font-medium ${
                    module.category === 'web' ? 'bg-blue-500/20 text-blue-400' :
                    module.category === 'network' ? 'bg-green-500/20 text-green-400' :
                    module.category === 'system' ? 'bg-purple-500/20 text-purple-400' :
                    'bg-gray-500/20 text-gray-400'
                  }`}>
                    {module.category.toUpperCase()}
                  </span>
                  <span className={`text-xs ${
                    module.status === 'completed' ? 'text-green-400' :
                    module.status === 'running' ? 'text-cyan-400' :
                    module.status === 'failed' ? 'text-red-400' :
                    'text-gray-400'
                  }`}>
                    {module.status.toUpperCase()}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Vulnerabilities Tab */}
      {activeTab === 'results' && (
        <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold text-white">Discovered Vulnerabilities</h3>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                <span className="text-sm text-gray-400">Critical: 1</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                <span className="text-sm text-gray-400">High: 1</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                <span className="text-sm text-gray-400">Medium: 1</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                <span className="text-sm text-gray-400">Low: 1</span>
              </div>
            </div>
          </div>

          <div className="space-y-4">
            {vulnerabilities.map((vuln) => (
              <div key={vuln.id} className={`border rounded-lg p-4 ${getSeverityColor(vuln.severity)} hover:scale-[1.02] transition-transform duration-200`}>
                <div className="flex items-start justify-between mb-3">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        vuln.severity === 'critical' ? 'bg-red-500 text-white' :
                        vuln.severity === 'high' ? 'bg-orange-500 text-white' :
                        vuln.severity === 'medium' ? 'bg-yellow-500 text-black' :
                        'bg-blue-500 text-white'
                      }`}>
                        {vuln.severity.toUpperCase()}
                      </span>
                      {vuln.cve && (
                        <span className="px-2 py-1 bg-gray-600 text-gray-300 rounded text-xs font-mono">
                          {vuln.cve}
                        </span>
                      )}
                      <span className="text-gray-400 text-sm">{vuln.target}</span>
                    </div>
                    <h4 className="text-white font-medium mb-2">{vuln.title}</h4>
                    <p className="text-gray-300 text-sm mb-3">{vuln.description}</p>
                    <div className="bg-gray-800/50 rounded p-3">
                      <h5 className="text-green-400 text-sm font-medium mb-1">Recommended Solution:</h5>
                      <p className="text-gray-300 text-sm">{vuln.solution}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {vuln.status === 'found' && <AlertTriangle className="w-5 h-5 text-red-400" />}
                    {vuln.status === 'patched' && <CheckCircle className="w-5 h-5 text-green-400" />}
                    {vuln.status === 'false-positive' && <XCircle className="w-5 h-5 text-gray-400" />}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}